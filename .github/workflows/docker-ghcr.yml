# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: GHCR Docker image

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - name: Git Tag
        run: |
          versionGit=$(git tag | sort -r | head -n1)
          versionPY=v$(grep 'Version = ' Node64Client/__init__.py | cut -d'=' -f2 | xargs)
          if [ "$versionGit" != "$versionPY" -a $(git tag | grep -c "$versionPY") -eq 0 ]; then
            echo "Need new Tag"
            echo "versionGit: '$versionGit' versionPY: '$versionPY'"
            echo "CREATETAG=true" >> $GITHUB_ENV
            echo "GIT_TAG=${versionPY}" >> $GITHUB_ENV
          else
            echo "Need no new Tag"
            echo "CREATETAG=false" >> $GITHUB_ENV
            echo "GIT_TAG=${version}" >> $GITHUB_ENV
          fi
        
      - name: Create tag
        if: env.CREATETAG == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.GIT_TAG }}',
              sha: context.sha
            })
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            # dynamically set the branch name as a prefix
            type=raw,prefix={{branch}}-,pattern={{version}},value=${{ env.GIT_TAG }},enable=${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: devices/Docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - uses: actions/delete-package-versions@v4
        with: 
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'true'